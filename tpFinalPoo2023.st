Object subclass: #Actividad	instanceVariableNames: 'horario nombre idActividad'	classVariableNames: ''	package: 'tpFinalPoo2023'!!Actividad methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/9/2023 11:55'!inicializarActividadConUnNombre: unNombre conUnIdActividad: unId conUnHorario: unHorarionombre:= unNombre.idActividad:= unId.horario := unHorario.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Actividad class	instanceVariableNames: ''!!Actividad class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/9/2023 11:54'!crearUnaActividadConUnNombre: unNombre conUnIdActividad: unId conUnHorario: unHorario|unActividad|unActividad:= self new.unActividad inicializarActividadConUnNombre: unNombre conUnIdActividad: unId conUnHorario: unHorario.^unActividad.! !Object subclass: #Cliente	instanceVariableNames: 'nombre collTratos dni informacionPreferencial numeroTelefeno ciudad collTratosTerminados'	classVariableNames: ''	package: 'tpFinalPoo2023'!!Cliente methodsFor: 'setMethod' stamp: 'Anonymous 9/1/2023 21:40'!addContrato: unContrato	collTratos add: unContrato! !!Cliente methodsFor: 'getMethod' stamp: 'Anonymous 7/31/2023 13:31'!getCollContratos^collTratos.! !!Cliente methodsFor: 'getMethod' stamp: 'Anonymous 7/31/2023 13:34'!getNumeroTelefono^numeroTelefeno! !!Cliente methodsFor: 'getMethod' stamp: 'Anonymous 7/31/2023 12:31'!getNombre^nombre.! !!Cliente methodsFor: 'getMethod' stamp: 'Anonymous 7/31/2023 13:33'!getContratoFinalizados^collTratosTerminados.! !!Cliente methodsFor: 'getMethod' stamp: 'Anonymous 7/31/2023 13:32'!getDni^dni"'ombre collTratos dni informacionPreferencial numeroTelefeno ciudad collTratosTerminados"! !!Cliente methodsFor: 'getMethod' stamp: 'Anonymous 7/31/2023 13:32'!getInformacionPreferencial^informacionPreferencial.! !!Cliente methodsFor: 'getMethod' stamp: 'Anonymous 7/31/2023 13:34'!getCiudad^ciudad.! !!Cliente methodsFor: 'initialize' stamp: 'Anonymous 7/31/2023 13:05'!inicializarConUnNombre: unNombre conUnDni: unDni conUnNumeroTelefeno: unNumeroTelefeno conUnaCiudad: unaCiudad conUnaInformacion: unaInformacionPreferencialnombre := unNombre.dni := unDni.numeroTelefeno :=unNumeroTelefeno.ciudad := unaCiudad.informacionPreferencial :=unaInformacionPreferencial.collTratos:= OrderedCollection new.collTratosTerminados:= OrderedCollection new.! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 13:33'!calcularDevolucionConUnContrato: unContrato	| diferenciaEnFecha montoTotal calcularTotal esClienteFrecuente unaDevolucion |	calcularTotal := 0.	esClienteFrecuente := self esClienteFrecuente.	diferenciaEnFecha := unContrato calcularDiferenciaEnFecha.	unContrato ifNotNil: [		montoTotal := unContrato calcularMontoTotal. " "		calcularTotal := self			                 calcularTotalConUnDias: diferenciaEnFecha			                 conUnMontoTotal: montoTotal ].	esClienteFrecuente		ifTrue: [			unaDevolucion := calcularTotal abs asString			                 ,			                 ' Millas  obtenidas por cancelacion de contrato, Cliente frecuente '			                 , String cr ]		ifFalse: [			unaDevolucion := calcularTotal abs asString			                 ,			                 ' Monto  obtenido por cancelacion de contrato, Cliente '			                 , String cr ].	collTratos remove: unContrato.	^ unaDevolucion! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 11:03'!pagarExcursionPorIdExcursion: unIdExcursion conUnIdContrato: unIdContrato|unContrato res|res:=false.	unContrato := self obtenerContratoPorId: unIdContrato.	(unContrato)ifNotNil: [  ^unContrato realizarPagoDeExcursionOpcConUnId: unIdExcursion.].^res.	! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 01:41'!pagarCuotaConIdContrato: conUnIdContrato conUnaCantidadDeCuota: unaCantidadDeCuota	| contratoEncontrado pagado |	"obtener contrato de Cliente""pagar con la canti de cuotas a Contrato""el mensaje de pagar cuota de Contrato puede ser puro"	contratoEncontrado := self obtenerContratoPorId: conUnIdContrato.	pagado := contratoEncontrado pagarCuotaConUnaCantidad:		          unaCantidadDeCuota.	^ pagado! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 03:41'!removerContratoYagregarContrato: unContratocollTratosTerminados add:unContrato.collTratos remove:unContrato.! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/28/2023 12:25'!obtenerClientePorId: unDni^unDni==dni.! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/4/2023 22:06'!verificarCandidato"mensaje recibido de EmpresaTurismo"|resultado|collTratos  detect:[:unContrato| unContrato  tieneViajeOrganizado ]ifNone:[nil].resultado:=collTratos isNotNil. "isNotNil es un mensaje que cuando recibe algo que no es nullo, devuelve true,"^resultado.! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 03:38'!esClienteFrecuente^false.! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/27/2023 13:22'!obtenerClientePorVencimiento	| resultado res|			^resultado  := collTratos detect: [:elemento |res:= elemento verificarVencimiento.] ifNone: [false]."	resultado := collTratos select: [ :unC | unC verificarVencimiento ]."! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 10:37'!obtenerContratoPorId: unId^collTratos detect:[:unC|unC obtenerContrato: unId]ifNone:[nil]! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 02:16'!obtenerContratoPorIdNombreViaje: unIdViajeNombre	| unContrato |	unContrato := collTratos		              detect: [ :unC |		              unC obtenerContratoPorIdNombreViaje: unIdViajeNombre ].			unContrato ifNotNil: [ ^ unContrato ] ifNil: [ ^ nil ]! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/31/2023 20:31'!calcularTotalConUnDias: diferenciaEnFecha conUnMontoTotal: montoTotal	| unMonto |	unMonto := montoTotal * 0.25.	diferenciaEnFecha >= 90 ifTrue: [ unMonto := montoTotal * 0.75 ].	(diferenciaEnFecha > 60 and: diferenciaEnFecha < 90) ifTrue: [		unMonto := montoTotal * 0.50 ].	^unMonto! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/28/2023 23:01'!pagarCuotaConIdContrato:conUnIdContrato|unContrato pagado|pagado:=false.unContrato:= self obtenerContratoPorId: conUnIdContrato.(unContrato)ifNotNil: [ pagado:=unContrato pagarCuota.			 ].^pagado.! !!Cliente methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/30/2023 12:24'!asignarUnContrato: unContratocollTratos add: unContrato.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cliente class	instanceVariableNames: ''!!Cliente class methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/30/2023 23:41'!crearClienteConUnNombre: unNombre conUnDni: unDni conUnNumeroTelefeno: unNumeroTelefeno conUnaCiudad: unaCiudad conUnaInformacion: unaInformacionPreferencial|unCliente| unCliente := self new.unCliente inicializarConUnNombre: unNombre conUnDni: unDni conUnNumeroTelefeno: unNumeroTelefeno conUnaCiudad: unaCiudad conUnaInformacion: unaInformacionPreferencial.^unCliente! !Cliente subclass: #ClienteFrecuente	instanceVariableNames: 'cantMillas'	classVariableNames: 'millasPorFrecuente'	package: 'tpFinalPoo2023'!!ClienteFrecuente methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/31/2023 20:31'!calcularTotalConUnDias: diferenciaEnFecha conUnMontoTotal: montoTotal	^cantMillas := cantMillas * diferenciaEnFecha * montoTotal.! !!ClienteFrecuente methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/29/2023 03:38'!esClienteFrecuente^true.! !!ClienteFrecuente methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/30/2023 12:15'!inicializarClienteFrecuenteConContratoFinalizados: unCollContratosFinalizados  conUnContrato: unaCollContratoscollTratos:=OrderedCollection new.collTratosTerminados := OrderedCollection new.collTratos add: unaCollContratos.collTratosTerminados add: unaCollContratos.cantMillas:= millasPorFrecuente.! !!ClienteFrecuente methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/9/2023 03:48'!agregarMillas: unasMillascantMillas:=cantMillas + unasMillas.! !!ClienteFrecuente methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/31/2023 15:41'!calcularDescuento|cantContratosFinalizados|cantContratosFinalizados := millasPorFrecuente * collTratosTerminados  length.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClienteFrecuente class	instanceVariableNames: ''!!ClienteFrecuente class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/30/2023 01:59'!crearClienteConUnNombre: unNombre conUnDni: unDni conUnNumeroTelefeno: unNumeroTelefeno conUnaCiudad: unaCiudad conUnaInformacion: unaInformacionPreferencial conUnaCollContratosFinalizados: unCollContratosFinalizados conUnaCollContratos: unaCollContratos|unClienteFrecuente|unClienteFrecuente := self crearClienteConUnNombre: unNombre conUnDni: unDni conUnNumeroTelefeno: unNumeroTelefeno conUnaCiudad: unaCiudad conUnaInformacion: unaInformacionPreferencial.unClienteFrecuente inicializarClienteFrecuenteConContratoFinalizados: unCollContratosFinalizados  conUnContrato: unaCollContratos.millasPorFrecuente:=500.^unClienteFrecuente. ! !Object subclass: #Contrato	instanceVariableNames: 'numeroContrato fechaDeContrato fechaSalidaViaje cantPersonas cuota viaje estadoContrato cantPersonasExcursion collExcursionesSelecionadas'	classVariableNames: ''	package: 'tpFinalPoo2023'!!Contrato methodsFor: 'metodos get' stamp: 'Anonymous 8/31/2023 20:43'!getFechaSelecionada^fechaSalidaViaje.! !!Contrato methodsFor: 'initialize' stamp: 'Anonymous 9/2/2023 00:49'!inicializar: unIdContrato conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadPersonas: unaCantidadPersonas conUnaCuota: unaCuota	| valorCuota valorPorPersona valorImpuesto |	numeroContrato := unIdContrato.	cantPersonasExcursion := 0.	collExcursionesSelecionadas := OrderedCollection new.	fechaDeContrato := unaFechaDeContrato.	cuota := OrderedCollection new.	cuota add: unaCuota.	cantPersonas := unaCantidadPersonas.	viaje := OrderedCollection new.	viaje := unViaje.	valorPorPersona := unViaje getCostoPorPersona.	valorImpuesto := unViaje getImpuesto.	fechaSalidaViaje := unViaje obtenerPrimeraFecha.	"calcular cuotas"	valorCuota := valorPorPersona * unaCantidadPersonas + valorImpuesto.	estadoContrato := false! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 00:54'!verificarVencimiento	| cuotaObtenida resultado |	"^resultado isNotNil.""isNotNil es un mensaje que cuando recibe algo que no es nullo, devuelve true,"	cuotaObtenida := cuota		                 detect: [ :unaC |		                 self verificarEstadoProximoAvencer: unaC ]		                 ifNone: [ nil ].	resultado := cuotaObtenida isNotNil. "isNotNil es un mensaje que cuando recibe algo que no es nullo, devuelve true,"	^ resultado	! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 22:25'!obtenerContratoPorIdNombreViaje: unIdNombreViaje	| res |	^res := viaje getVerificarUnViaje: unIdNombreViaje.	"res		ifTrue: [ ^ self ]		ifFalse: [ ^ nil ]"! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/27/2023 12:01'!verificarEstadoProximoAvencer:unaC| resultado diferenciaDeFechas unaFechaV|unaFechaV:=unaC getVencimiento.diferenciaDeFechas:=(unaFechaV julianDayNumber - Date today julianDayNumber). ^resultado:=(diferenciaDeFechas<6)! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 02:48'!cuotasPagadas|res|res:=cuota allSatisfy: [:unaC| unaC verificarCuotaPagada].^res.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/9/2023 13:51'!getFechaSalida^ viaje getFechaSelecionada ! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/4/2023 14:02'!crearUnaFechaDeCuotaConUnDia: unDia conUnMes: unMes conUnAnio: unAnio^Date newDay: unDia month: unMes year: unAnio.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/28/2023 23:31'!pagarCuota|res|res:=cuota detect:[:unC| unC pagarCuota].(res)ifNotNil:[^true] ifNil:[^false.]! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/8/2023 00:31'!getCuota^cuota.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 03:30'!excursionesPagadas|res|res:=collExcursionesSelecionadas  allSatisfy: [:unaExcursion| unaExcursion verificarExcursionesPagadas].^res.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 01:04'!verificarViajeOrganizado_y_agregarExcursion: unIdExcursion conUnidViaje: idNombre	| excursionAgregada unaExcursionOpc res fechaHoy  diferenciaDeFechas|	excursionAgregada := false.	res := viaje esViajeOrganizado.	res ifTrue: [		unaExcursionOpc := viaje getExcursionOpcDeViajeOrganizado:			                   unIdExcursion.		fechaHoy := Date today.				diferenciaDeFechas:=((fechaSalidaViaje-fechaHoy)asDays).		unaExcursionOpc ifNotNil: [			diferenciaDeFechas > 7 ifTrue: [				excursionAgregada := true.				collExcursionesSelecionadas add: unaExcursionOpc ] ] ].	^ excursionAgregada.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/5/2023 14:48'!obtenerContrato: unIdContrato^unIdContrato==numeroContrato.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/30/2023 12:30'!tipoDeContratoFlexible^false.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/31/2023 23:06'!tieneViajeOrganizado	| res |	^res := viaje esViajeOrganizado.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/9/2023 12:44'!setCantPersonasExcursion: unaCantidadPersonascantPersonasExcursion:= cantPersonasExcursion + unaCantidadPersonas.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/31/2023 20:00'!calcularMontoTotal	| totalExcursiones totalCuota |	totalExcursiones := 0.	collExcursionesSelecionadas do: [ :unaExcursion |		totalExcursiones := totalExcursiones		                    + unaExcursion getPrecioExcursion ].	totalCuota := 0.	cuota do: [ :unaC | totalCuota := totalCuota + unaC getPrecio ].^(totalCuota + totalExcursiones)! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/31/2023 21:45'!calcularDiferenciaEnFecha	| fechaDeCancelacion |	fechaDeCancelacion := Date today.	^ ((fechaDeCancelacion - fechaSalidaViaje) asDays) abs! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 09:51'!verificarDisponibilidadDeViaje|puedeViajar fechaHoy c1 c2 |fechaHoy:= Date today.puedeViajar:=false."diferencia:=(fechaHoy - fechaSalidaViaje)asDate."(10>7)ifTrue: [ 	c1:= self cuotasPagadas.c2:= self excursionesPagadas.	(c1 and: c2)ifTrue: [  		puedeViajar:=true.	]		 ].^puedeViajar.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/31/2023 21:27'!getViaje	^viaje! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/9/2023 13:17'!agregarValorExcursion:unCostoAdcionalcuota agregarCostoAdicional:unCostoAdcional.! !!Contrato methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 11:01'!realizarPagoDeExcursionOpcConUnId:unIdExcursion|res pagado|res:=collExcursionesSelecionadas detect:[:unaExcOpc|unaExcOpc obtenerUnaExcursion:unIdExcursion ]ifNone:[nil]"si es nulo,devuelve false."."pagarUnaExcursionOpc:unIdExcursion"(res)ifNotNil: [pagado:=res pagarExcursionOpcional.^true.	 ]ifNil: [^false].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Contrato class	instanceVariableNames: ''!!Contrato class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/8/2023 15:26'!crear: unIdContrato conUnaFechaDeContrato: unaFechaDeContrato  cantidadPersonas: unaCantidadPersonas conUnViaje: unViaje|unContrato precioCuota valorDeViaje unaCuota fechaVencimiento|valorDeViaje:= unViaje getCostoPorPersona.precioCuota:= valorDeViaje*unaCantidadPersonas."precioCuota".fechaVencimiento:= unaFechaDeContrato addDays: 30.unContrato:= self new.unaCuota:= Cuota crearCuota: precioCuota conFechaDeVencimiento: fechaVencimiento.unContrato inicializar:unIdContrato conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadPersonas: unaCantidadPersonas conUnaCuota: unaCuota ."unaCuota crearCuota: unMonto conFechaDeVencimiento: unaFechaVencimiento" ^unContrato ! !Contrato subclass: #ContratoFlexible	instanceVariableNames: 'montoControFlexible cantCuota cantCuotaPagada'	classVariableNames: ''	package: 'tpFinalPoo2023'!!ContratoFlexible methodsFor: 'setMethod' stamp: 'Anonymous 8/8/2023 14:16'!addCuotas: unaCuotacuota add: unaCuota! !!ContratoFlexible methodsFor: 'initialize' stamp: 'Anonymous 8/31/2023 22:13'!inicializarConUnaCantidadCuota: unaCantidadDeCuota conUnaCantidadPersonas: unaCantidadPersonas conUnMontoFlexible: unMontoFlexible	"unaContratoFlexible inicializarConUnMontoFlexible: unIdContrato conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadCuota: unaCantidadDeCuota conUnaCantidadPersonas: unaCantidadPersonas."	| costoViaje valorCuota valorImpuestoPorCuota |	"viaje := unViaje.""fechaDeContrato:= unaFechaDeContrato."	cantPersonas := unaCantidadPersonas.	cantCuota := unaCantidadDeCuota.	"numeroContrato :=unIdContrato."	costoViaje := viaje getCostoPorPersona.	valorCuota := costoViaje * unaCantidadPersonas / unaCantidadDeCuota.	montoControFlexible := unMontoFlexible.	"elimino la primera cuota creada como Contrato"	cuota := OrderedCollection new.		fechaSalidaViaje := viaje obtenerPrimeraFecha.	valorImpuestoPorCuota := montoControFlexible + viaje getImpuesto	                         / unaCantidadDeCuota.	valorCuota := valorCuota + valorImpuestoPorCuota.	[ cuota size < unaCantidadDeCuota ] whileTrue: [ "Calcula la fecha de vencimiento sumando los días entre cuotas a la fecha de contrato"		| fechaVencimientoDeUnaCuota unCuotaNueva |		fechaVencimientoDeUnaCuota := fechaDeContrato addDays:			                              cuota size + 1 * 30.		"Crear la cuota con el monto y la fecha de vencimiento calculados"		unCuotaNueva := Cuota			                crearCuota: valorCuota			                conFechaDeVencimiento: fechaVencimientoDeUnaCuota.		"Agregar la cuota a la colección de cuotas"		cuota add: unCuotaNueva ]! !!ContratoFlexible methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/9/2023 13:27'!agregarValorExcursion:unCostoAdcional|totalCuotasFaltantes costoAdicionalPorCuota|"cantCuota cantCuotaPagada"totalCuotasFaltantes:=cantCuota-cantCuotaPagada.costoAdicionalPorCuota:= (unCostoAdcional/totalCuotasFaltantes).cuota do:[:unCuota| super agregarValorExcursion:unCostoAdcional ].! !!ContratoFlexible methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/30/2023 13:32'!setFecha: fechaCambiadafechaSalidaViaje:=fechaCambiada.! !!ContratoFlexible methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/30/2023 12:30'!tipoDeContratoFlexible^true.! !!ContratoFlexible methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/8/2023 01:01'!getCantCuota^cantCuota.! !!ContratoFlexible methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 11:17'!pagarCuotaConUnaCantidad: unaCantidad	| unaPagada i unaC estaPagada |	"pagarCuota"	unaPagada := false.	i := 1.	[ i <= unaCantidad ] whileTrue: [		unaC := cuota at: i.		estaPagada := unaC pagarCuota.		estaPagada ifTrue: [ unaPagada ].		i := i + 1 ].	^ unaPagada! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ContratoFlexible class	instanceVariableNames: ''!!ContratoFlexible class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/8/2023 14:50'!crear: unIdContrato conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadCuota: unaCantidadDeCuota conUnaCantidadPersonas: unaCantidadPersonas conUnMontoFlexible: unMontoFlexible"crear: unIdContrato conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadCuota: unaCantidadDeCuota conUnaCantidadPersonas: unaCantidadPersonas."|unaContratoFlexible|unaContratoFlexible:= self crear: unIdContrato conUnaFechaDeContrato: unaFechaDeContrato  cantidadPersonas: unaCantidadPersonas conUnViaje: unViaje.unaContratoFlexible inicializarConUnaCantidadCuota: unaCantidadDeCuota conUnaCantidadPersonas: unaCantidadPersonas conUnMontoFlexible: unMontoFlexible."unaCuota:= Cuota crearCuota: precioCuota conFechaDeVencimiento: fechaVencimiento.unContrato inicializar:unIdContrato conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadPersonas: unaCantidadPersonas conUnaCuota: unaCuota ."^unaContratoFlexible.! !Object subclass: #Cuota	instanceVariableNames: 'monto estadoCuota fechaDePago fechaVencimiento'	classVariableNames: ''	package: 'tpFinalPoo2023'!!Cuota methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/29/2023 00:07'!pagarCuota|pagado|pagado:=false.(fechaDePago)ifNil: [ estadoCuota:=true.fechaDePago:= Date today.pagado:=true. ].^pagado.! !!Cuota methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/4/2023 22:00'!getEstadoCuota^estadoCuota.! !!Cuota methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/9/2023 13:17'!agregarCostoAdicional:unCostoAdcional(estadoCuota)ifFalse:[monto:= monto +unCostoAdcional] ! !!Cuota methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/28/2023 23:57'!unaCuota^(estadoCuota)ifTrue:[true]ifFalse:[ estadoCuota:=true. fechaDePago := Date today]! !!Cuota methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/29/2023 02:35'!verificarCuotaPagada|res|res:=false.(fechaDePago)ifNotNil:[res:=true.]. ^res.! !!Cuota methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/8/2023 00:40'!verificarCuotaProximaAvencer|unaFechaV diferenciaDeFechas resultado|unaFechaV:=self getVencimiento.diferenciaDeFechas:=(Date today - unaFechaV)asDays.resultado:=(((estadoCuota not) and:(diferenciaDeFechas<6))).^resultado."((Date today - cuotaC1)asDays)<6"! !!Cuota methodsFor: 'initialize' stamp: 'Anonymous 8/27/2023 04:28'!inicializarUnaCuotaConUnMonto: unMonto conFechaDeVencimiento: unaFechaVencimientomonto :=unMonto.estadoCuota:=false.fechaVencimiento:=unaFechaVencimiento! !!Cuota methodsFor: 'getMethod' stamp: 'Anonymous 8/30/2023 13:56'!getPrecio^monto! !!Cuota methodsFor: 'getMethod' stamp: 'Anonymous 8/4/2023 21:21'!getVencimiento.^fechaVencimiento! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cuota class	instanceVariableNames: ''!!Cuota class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/4/2023 14:30'!crearCuota: unMonto conFechaDeVencimiento: unaFechaVencimiento|unaCuota|unaCuota:=self new.unaCuota inicializarUnaCuotaConUnMonto: unMonto conFechaDeVencimiento: unaFechaVencimiento.^unaCuota.! !Object subclass: #EmpresaTurismo	instanceVariableNames: 'collCliente collViaje nombreEmpresa collContrato'	classVariableNames: 'cantidadMillasParaElDescuento'	package: 'tpFinalPoo2023'!!EmpresaTurismo methodsFor: 'getMethod' stamp: 'Anonymous 8/8/2023 00:05'!getContratos^collContrato.! !!EmpresaTurismo methodsFor: 'getMethod' stamp: 'Anonymous 7/30/2023 18:52'!getViaje^collViaje.! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 20:27'!realizarElPagoDeExcursionOpcionalPorIdExcursion: unIdExcursionOpc conUnIdCliente: unIdCliente conUnIdContrato: unIdContrato	| clienteEncontrado pagado respuesta |	clienteEncontrado := self obtenerClientePorId: unIdCliente.	clienteEncontrado ifNotNil: [		pagado := clienteEncontrado			          pagarExcursionPorIdExcursion: unIdExcursionOpc			          conUnIdContrato: unIdContrato ].	pagado		ifTrue: [			respuesta := Transcript show:				             '2_d) Las excursiones ' , unIdExcursionOpc asString				             , ' del contrato ' , unIdContrato asString				             , ' fue pagada con exito' ]		ifFalse: [			respuesta := Transcript show:				             '2_d) Las excursiones   ' , unIdExcursionOpc asString				             , ' ' , unIdContrato asString , ' no se pudo pagar' ].	^ respuesta! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 13:00'!realizarEfectivizacionConUnCliente: idCliente conUnIdViaje: unIdViaje	| unCliente puedeViajar unContrato esUnViajeOrganizado respuesta |	puedeViajar := false.	respuesta := 'El idCliente ' , idCliente asString	             ,	             ' no cumple con los requisitos para realizar el viaje (efectivizacion)'.	unCliente := self obtenerClientePorId: idCliente.	unContrato := unCliente obtenerContratoPorIdNombreViaje: unIdViaje.	unContrato ifNotNil: [		esUnViajeOrganizado := unContrato tieneViajeOrganizado.		puedeViajar := unContrato verificarDisponibilidadDeViaje.		puedeViajar ifTrue: [			respuesta := '2_e) El idCliente ' , idCliente asString			             ,			             ' cumple con los requisitos para realizar el viaje (efectivizacion), el viaje '			             , unIdViaje asString , ' ya no pertecene al cliente '			             , idCliente asString.			unCliente removerContratoYagregarContrato: unContrato.			"primero verifico si cliente es frecuente"			esUnViajeOrganizado ifTrue: [				unCliente esClienteFrecuente ifFalse: [					respuesta := '2_e) El idCliente ' , idCliente asString					             ,					             ' cumple con los requisitos para realizar el viaje (efectivizacion), y ademas cambio de categoria a Cliente Frecuente, y el viaje '					             , unIdViaje asString					             , ' ya no pertecene al cliente '.					self cambiarDeCliente_a_clienteFrecuente: unCliente ] ] ] ].	^ Transcript show: respuesta! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 19:17'!crearUnViajeOrganizadoConUnNombre: unNombre conUnCostoPorPersona: unCostoPersona conUnImporteImpuesto: unImporteImpuesto conUnaCantidadDuracion: unaCantidadDiasDuracion conUnaEtapaViaje: unaEtapaViaje conUnaCollFechaViajeSalida: unaCollFechaSalida	| unViajeOrganizado |	unViajeOrganizado := ViajeOrganizado		                     crearUnViajeOrganizadoConUnNombre: unNombre		                     conUnCostoPorPersona: unCostoPersona		                     conUnImporteImpuesto: unImporteImpuesto		                     conUnaCantidadDuracion: unaCantidadDiasDuracion		                     conUnaEtapaViaje: unaEtapaViaje		                     conUnaCollFechaViajeSalida: unaCollFechaSalida.	collViaje add: unViajeOrganizado.	Transcript show: 'La creacion del viaje organizado fue un exito, '		, unNombre asString.	^ unViajeOrganizado! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 12:40'!realizarPagoCuotaContratoID_y_conIdCliente: unDni conUnIdContrato: conUnIdContrato conUnaCantidadDeCuota: unaCantidadDeCuota	| clienteEncontradoParaPagarSuCuota respuesta |	"busco el contrato que tiene el cliente"	clienteEncontradoParaPagarSuCuota := self obtenerClientePorId: unDni.	clienteEncontradoParaPagarSuCuota		pagarCuotaConIdContrato: conUnIdContrato		conUnaCantidadDeCuota: unaCantidadDeCuota.	clienteEncontradoParaPagarSuCuota		ifNotNil: [			respuesta := Transcript show:				             '2_d) Las cuotas del contrato '				             , conUnIdContrato asString , ' fue pagada con exito.' ]		ifNil: [			respuesta := Transcript show:				             '2_d) Las cuotas del contrato  '				             , conUnIdContrato asString , ' no se pudo pagar.' ].	^ respuesta! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 13:42'!realizarUnCambioDeFechaDeViaje: unaFechaNueva conUnIdCliente: idCliente conUnIdNombreViaje: unIdNombreViaje	| unCliente unContrato esUnViajeOrganizado unViajeOrganizado fechaCambiada unaDevolucion unaRespuesta |	unCliente := self obtenerClientePorId: idCliente.	"obtenerContratoPorIdNombreViaje:"	unContrato := unCliente obtenerContratoPorIdNombreViaje:		              unIdNombreViaje.	unaRespuesta := 				                '2_e)  Unicamente los viajes de tipo Organizados estan habilitados para reprogramar su fecha de salida '.	unContrato		ifNotNil: [			esUnViajeOrganizado := unContrato tieneViajeOrganizado.			esUnViajeOrganizado ifTrue: [				unCliente ifNotNil: [					unViajeOrganizado := unContrato getViaje.					fechaCambiada := unViajeOrganizado						                 verificarFechaDisponibleEnViaje: unaFechaNueva.					fechaCambiada						ifTrue: [							unaRespuesta := 								                '2_e) Su viaje fue reprogramado con exito '.							unContrato setFecha: unaFechaNueva ]						ifFalse: [							unaDevolucion := unCliente calcularDevolucionConUnContrato:								                 unContrato.							unaRespuesta :=								                '2_e)  No es posible reprogramar su viaje, porque el viaje no contiene disponibilidad con la fecha solicitada, su devolucion es: '								                , unaDevolucion asString , '. ' ] ] ] ].					^Transcript show: unaRespuesta! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 20:24'!clientesProximosAvencer	| collClientesProximoAvencer respuesta |	respuesta := ''.	collClientesProximoAvencer := collCliente select: [ :unCliente |		                              | r |		                              r := unCliente			                                   obtenerClientePorVencimiento.		                              r ifNotNil: [			                              respuesta := respuesta			                                           , unCliente getNombre			                                           , ' - ' ].		                              r ~= false ].	Transcript show:		'2_c) Los Clientes proximos a vencer son: ' , respuesta asString.	^ collClientesProximoAvencer! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 22:29'!darDeBajaViajeConNombreViaje: unIdNombreViaje	| eliminarUnViaje contratosAeliminar res |	eliminarUnViaje := self obtenerViajePorIdNombre: unIdNombreViaje.	eliminarUnViaje		ifNotNil: [			Transcript show: eliminarUnViaje asString.			contratosAeliminar := OrderedCollection new.			collContrato do: [ :unC |				res := unC obtenerContratoPorIdNombreViaje: unIdNombreViaje.				res ifTrue: [ contratosAeliminar add: unC ] ].			collViaje remove: eliminarUnViaje.			collContrato removeAll: contratosAeliminar.			^ Transcript show:				  ' 2_g) La baja del viaje ' , unIdNombreViaje asString				  , ' fue un exito' ]		ifNil: [			^ Transcript show:				  '2_g) No fue posible dar de baja al viaje '				  , unIdNombreViaje asString , ' utlize otro idNombre viaje' ]! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 21:45'!crearUnContratoFlexibleConUnIdDeContrato: unIdContrato conUnCliente: unCliente conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadCuota: unaCantidadDeCuota conUnaCantidadPersonas: unaCantidadPersonas conUnMontoFlexible: unMontoFlexible	| unContrato |	unContrato := ContratoFlexible		              crear: unIdContrato		              conUnViaje: unViaje		              conUnaFechaDeContrato: unaFechaDeContrato		              conUnaCantidadCuota: unaCantidadDeCuota		              conUnaCantidadPersonas: unaCantidadPersonas		              conUnMontoFlexible: unMontoFlexible.	unCliente addContrato: unContrato.	collContrato add: unContrato.	collCliente add:unCliente.	Transcript show:		'2_a) La creacion de un contrato flexible fue un exito, '		, unIdContrato asString.	^ unContrato! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 22:14'!obtenerViajePorRangoInicio: f1 conFechaFin: f2	| collViajesPorRango resultado |	collViajesPorRango := OrderedCollection new.	resultado := ''.	collViaje do: [ :unViaje |		| unV |		unV := unViaje obtenerViajePorRangoInicio: f1 conFechaFin: f2.		unV ifNotNil: [			collViajesPorRango add: unViaje.			resultado := resultado , unViaje getNombre asString , ' ' ] ].	^ Transcript show: '2_b) los viajes son :' , resultado asString! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/28/2023 12:26'!obtenerClientePorId: idCliente| unCliente |^unCliente:= collCliente detect:[:unC| unC obtenerClientePorId:idCliente]! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 20:36'!agregarExcursionConIdExcursion: unIdExcursion conUnIdViajeNombre: unIdViajeNombre conUnIdCliente: unDniCliente	| excursionAgregada unContrato unCliente respuesta |	unCliente := self obtenerClientePorId: unDniCliente.	excursionAgregada := false.	"buscarViajeEnUnContrato"	unCliente ifNotNil: [		unContrato := unCliente obtenerContratoPorIdNombreViaje:			              unIdViajeNombre.		"verificarViajeOrganizado_y_agregarExcursion: unIdExcursion conUnidViaje: idNombre"		"lo nuevo"		unContrato ifNotNil: [			excursionAgregada := unContrato				                     verificarViajeOrganizado_y_agregarExcursion:				                     unIdExcursion				                     conUnidViaje: unIdViajeNombre.			excursionAgregada				ifTrue: [					respuesta := Transcript show:						             '2_f) La excursion ' , unIdExcursion asString						             , ' fue agregada al viaje  ' , unIdViajeNombre						             , ' con Exito' ]				ifFalse: [ "^ excursionAgregada"					respuesta := Transcript show:						             '2_f) La excursion ' , unIdExcursion asString						             , ' no pertenece al  viaje ' , unIdViajeNombre						             , ', solo admiten excursiones que esten el viaje ' ] ] ].	^ respuesta! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 20:24'!crearUnContratoConUnIdDeContrato: unIdContrato conUnCliente: unCliente conUnViaje: unViaje conUnaFechaDeContrato: unaFechaDeContrato conUnaCantidadPersonas: unaCantidadPersonas	| unContrato |	unContrato := Contrato		              crear: unIdContrato		              conUnaFechaDeContrato: unaFechaDeContrato		              cantidadPersonas: unaCantidadPersonas		              conUnViaje: unViaje.	collContrato add: unContrato.	unCliente addContrato: unContrato.	collCliente add: unCliente.	Transcript show: '2_a) La creacion de un contrato directo fue un exito, '		, unIdContrato asString.	^ unContrato! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/31/2023 23:21'!agregarCliente: unCliente	collCliente add: unCliente! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 00:53'!obtenerViajePorIdNombre: unIdNombreViaje^collViaje detect: [ :unV | unV getVerificarUnViaje: unIdNombreViaje ].! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 20:25'!realizarPagoCuotaContratoID_y_conIdCliente: unDni conUnIdContrato: conUnIdContrato	| clienteEncontrado cuotaPagada respuesta |	"busco el contrato que tiene el cliente"	clienteEncontrado := self obtenerClientePorId: unDni.	clienteEncontrado ifNotNil: [		cuotaPagada := clienteEncontrado pagarCuotaConIdContrato:			               conUnIdContrato.		cuotaPagada			ifTrue: [				respuesta := Transcript show:					             '2_d) La cuota total del contrato '					             , conUnIdContrato asString					             , ' fue pagada con exito,' ]			ifFalse: [				respuesta := Transcript show:					             '2_d) La cuota total del contrato '					             , conUnIdContrato asString , ' no se pudo pagar,' ] ].	^ respuesta! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/30/2023 01:34'!cambiarDeCliente_a_clienteFrecuente: unCliente|unClienteFrecuente unNombre unDni unNumero unaCiudad unaInformacion	unaCollFinalizados unaCollContratos|unNombre:= unCliente getNombre.unNumero :=unCliente getNumeroTelefono.unDni:= unCliente getDni.unaCiudad := unCliente getCiudad.unaInformacion:= unCliente getInformacionPreferencial.unaCollFinalizados := unCliente getContratoFinalizados.unaCollContratos := unCliente getCollContratos.		unClienteFrecuente:= ClienteFrecuente  crearClienteConUnNombre: unNombre  conUnDni: unDni  conUnNumeroTelefeno: unNumero  conUnaCiudad: unaCiudad  conUnaInformacion: unaInformacion  conUnaCollContratosFinalizados: unaCollFinalizados  conUnaCollContratos:unaCollContratos.(unClienteFrecuente)ifNotNil: [ 	collCliente remove:unCliente.	collCliente add:unClienteFrecuente.		 ]! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 01:00'!crearUnViajeEspecialConUnNombre: unNombre conUnCostoPorPersona: unaCostoPorPersona conUnImporteImpuesto: unImporteImpuesto conUnNombreCiudad: unNombreCiudad conUnaFechaSalida: unaFechaSalida conUnaFechaRegreso: unaFechaRegreso	| unViajeEspecial |	unViajeEspecial := ViajeEspecial		                   crearUnViajeEspecialConUnNombre: unNombre		                   conUnCostoPorPersona: unaCostoPorPersona		                   conUnImporteImpuesto: unImporteImpuesto		                   conUnNombreCiudad: unNombreCiudad		                   conUnaFechaSalida: unaFechaSalida		                   conUnaFechaRegreso: unaFechaRegreso.	collViaje add: unViajeEspecial.	Transcript show:		'La creacion del viaje especial fue un exito, ' , unNombre asString.	^ unViajeEspecial! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/9/2023 03:43'!obtenerContratoPorUnId:unIdContrato|unContrato|unContrato:=collContrato  detect:[:unC| unC obtenerContrato: unIdContrato ]ifNone:[nil].^unContrato.! !!EmpresaTurismo methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/1/2023 19:10'!modificarPrecioDeUnViajeConUnPrecio: unPrecio conUnIdNombreViaje: unIdNombreViaje	| unViaje repuesta |	unViaje := self obtenerViajePorIdNombre: unIdNombreViaje.	repuesta := unViaje setCostoViaje: unPrecio.	^ Transcript show: 'La modificacion del precio sobre el viaje '		  , unViaje getNombre asString , 'fue un exito, precio actualizado '		  , unViaje getCostoPorPersona asString.! !!EmpresaTurismo methodsFor: 'setMethod' stamp: 'Anonymous 7/30/2023 18:52'!setViaje: unViajecollViaje add: unViaje! !!EmpresaTurismo methodsFor: 'setMethod' stamp: 'Anonymous 7/30/2023 20:51'!addViaje: unViajecollViaje add: unViaje! !!EmpresaTurismo methodsFor: 'setMethod' stamp: 'Anonymous 7/31/2023 01:47'!addCliente: unClientecollCliente add:unCliente.! !!EmpresaTurismo methodsFor: 'initialization' stamp: 'Anonymous 8/4/2023 12:48'!inicializar: unNombrenombreEmpresa:= unNombre.collViaje:= OrderedCollection new.collCliente:= OrderedCollection new.collContrato :=OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmpresaTurismo class	instanceVariableNames: ''!!EmpresaTurismo class methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/31/2023 15:26'!crearUnaEmpresaTurismoConUnNombre: unNombre|unaEmpresa|unaEmpresa:= self new.unaEmpresa inicializar: unNombre.cantidadMillasParaElDescuento:=5000.^unaEmpresa.! !Object subclass: #Etapa	instanceVariableNames: 'fechaLlegada cantDiasCiudad hotel tipoPension collActividad etapaNombreCiudad collExcursionesOpcionales'	classVariableNames: ''	package: 'tpFinalPoo2023'!!Etapa methodsFor: 'initialization' stamp: 'Anonymous 8/27/2023 20:26'!setAddExcursionOpc: unaExcursionOpccollExcursionesOpcionales add: unaExcursionOpc.! !!Etapa methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/27/2023 21:08'!obtenerEtapaPorNombre:unNombre^unNombre == etapaNombreCiudad.! !!Etapa methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/27/2023 20:30'!inicializar: unNombreCiudad conUnaFechaLLegada: unaFechaLlegada conUnaCantidadDias: unaCantidadDias conUnHotel: unHotel conUnaListaActidades: unaListaActividades conUnTipoPension: unTipoPesion conUnaExcursionOpcional: unaExcursionesOpcionalcollExcursionesOpcionales:=OrderedCollection new.collExcursionesOpcionales add: unaExcursionesOpcional.etapaNombreCiudad := unNombreCiudad.fechaLlegada := unaFechaLlegada.cantDiasCiudad := unaCantidadDias.hotel:= unHotel.tipoPension :=unTipoPesion.! !!Etapa methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/28/2023 12:08'!obtenerUnaExcursion: unId|res e| "ok"res:=collExcursionesOpcionales  detect:[:unaExcOpc| e:=unaExcOpc obtenerUnaExcursion: unId.]ifNone:[nil]."si el resultado es vacio, entonces  le devuelvo nil"^res.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Etapa class	instanceVariableNames: ''!!Etapa class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/27/2023 20:14'!crearUnaEtapaConNombreCiudad: unNombreCiudad conUnaFechaLLegada: unaFechaLlegada conUnaCantidadDias: unaCantidadDias conUnHotel: unHotel conUnaListaActidades: unaListaActividades conUnTipoPension: unTipoPesion conUnaExcursionOpcional: unaExcursionesOpcional|unaEtapa|unaEtapa:= self new.unaEtapa inicializar: unNombreCiudad conUnaFechaLLegada: unaFechaLlegada conUnaCantidadDias: unaCantidadDias conUnHotel: unHotel conUnaListaActidades: unaListaActividades conUnTipoPension: unTipoPesion conUnaExcursionOpcional: unaExcursionesOpcional.^unaEtapa.! !Object subclass: #ExcursionesOpc	instanceVariableNames: 'idExcursiones nombre collActividad precio limitePersona fecha fechaDePago'	classVariableNames: ''	package: 'tpFinalPoo2023'!!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/9/2023 12:16'!getFechaExcursion^fecha.! !!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/9/2023 12:40'!getPrecioExcursion^precio.! !!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/28/2023 12:07'!obtenerUnaExcursion:unId^unId==idExcursiones! !!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/9/2023 12:24'!getLimitePersonas^limitePersona.! !!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/27/2023 20:42'!inicializarUnaExcursionConUnNombre: unNombre conUnId: unId conUnaCollActividad: unaActividad conUnPrecio: unPrecio conUnaFecha: unaFechanombre := unNombre.idExcursiones := unId.precio := unPrecio.collActividad:= unaActividad.fecha:= unaFecha.! !!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/29/2023 10:11'!pagarUnaExcursionOpc:unIdExcursion|pagado|pagado:=false.(idExcursiones==unIdExcursion)ifTrue:  [fechaDePago:=Date today.	pagado:=true.			  ].^pagado.! !!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/29/2023 03:32'!verificarExcursionesPagadas^(fechaDePago)isNotNil.! !!ExcursionesOpc methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/29/2023 10:50'!pagarExcursionOpcionalfechaDePago:=Date today.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ExcursionesOpc class	instanceVariableNames: ''!!ExcursionesOpc class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/14/2023 06:29'!crearUnaExcursionConUnNombre: unNombre conUnId: unId conUnaCollActividad: unaActividad conUnPrecio: unPrecio conUnaFecha: unaFecha|unaExcursion|unaExcursion:= self new.unaExcursion inicializarUnaExcursionConUnNombre: unNombre conUnId: unId conUnaCollActividad: unaActividad conUnPrecio: unPrecio conUnaFecha: unaFecha.^unaExcursion.! !Object subclass: #FechaViajeOrganizado	instanceVariableNames: 'fechaDeSalida disponible cantidadPersona'	classVariableNames: ''	package: 'tpFinalPoo2023'!!FechaViajeOrganizado methodsFor: 'metodos get' stamp: 'Anonymous 8/4/2023 17:36'!fechaViaje:f1 conFechaFin:f2^((f1 isBefore:fechaDeSalida) and:(f2  isAfter: fechaDeSalida)) ! !!FechaViajeOrganizado methodsFor: 'metodos get' stamp: 'Anonymous 8/31/2023 22:15'!getFechaSelecionada	^fechaDeSalida asDate.! !!FechaViajeOrganizado methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/27/2023 23:27'!inicializarUnaFechaOrganizadoInicio: unaFechaDeSalida conUnCupoDePersona: unCupofechaDeSalida := unaFechaDeSalida.cantidadPersona := unCupo.disponible :=true.! !!FechaViajeOrganizado methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/30/2023 04:22'!ultimoViajeReciente|numeroDeAnio numeroDeAnioActual|numeroDeAnio:= fechaDeSalida year.numeroDeAnioActual:= Date today year.^(numeroDeAnio>=(numeroDeAnioActual-1))! !!FechaViajeOrganizado methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/30/2023 13:12'!verificarCoincidenciaConUnaFechaNueva: unaFechaNueva^fechaDeSalida==unaFechaNueva.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FechaViajeOrganizado class	instanceVariableNames: ''!!FechaViajeOrganizado class methodsFor: 'as yet unclassified' stamp: 'Anonymous 8/4/2023 17:03'!crearUnaFechaDeSalidaDeOrganizacion:unaFechaDeSalida conUnCupoDePersona: unCupo|fecha|fecha:= self new.fecha inicializarUnaFechaOrganizadoInicio: unaFechaDeSalida conUnCupoDePersona: unCupo.^fecha! !Object subclass: #Viaje	instanceVariableNames: 'nombre costoPorPersona impuestoValor viajeTerminado'	classVariableNames: ''	package: 'tpFinalPoo2023'!!Viaje methodsFor: 'initialization' stamp: 'Anonymous 8/8/2023 19:58'!setCostoViaje: unCostoViajecostoPorPersona :=unCostoViaje.! !!Viaje methodsFor: 'initialization' stamp: 'Anonymous 7/29/2023 04:59'!inicializarUnNombre: unNombre conUnCostoPorPersona: unCostoPersona conUnImporteImpuesto: unImporteImpuesto.nombre := unNombre.costoPorPersona :=unCostoPersona.impuestoValor := unImporteImpuesto.viajeTerminado := false.! !!Viaje methodsFor: 'getMethod' stamp: 'Anonymous 8/28/2023 13:49'!getImpuesto^impuestoValor.! !!Viaje methodsFor: 'getMethod' stamp: 'Anonymous 8/28/2023 14:19'!getVerificarUnViaje: unIdNombreViaje^nombre==unIdNombreViaje! !!Viaje methodsFor: 'getMethod' stamp: 'Anonymous 8/27/2023 03:10'!getNombre^nombre.! !!Viaje methodsFor: 'getMethod' stamp: 'Anonymous 8/28/2023 13:49'!getCostoPorPersona^costoPorPersona.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Viaje class	instanceVariableNames: ''!!Viaje class methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/30/2023 18:41'!generarFecha: unDia conUnMes: unMes conUnAnio: unAnio|fecha|^fecha := Date newDay: unDia month: unMes year: unAnio.! !!Viaje class methodsFor: 'constructor' stamp: 'Anonymous 8/26/2023 23:19'!crearUnViajeConUnNombre: unNombre conUnCostoPorPersona: unCostoPersona conUnImporteImpuesto: unImporteImpuesto|unViaje|unViaje :=self new.unViaje inicializarUnNombre: unNombre conUnCostoPorPersona: unCostoPersona conUnImporteImpuesto: unImporteImpuesto.^unViaje.! !Viaje subclass: #ViajeEspecial	instanceVariableNames: 'nombreDeLaCiudad fechaSalida fechaRegreso'	classVariableNames: ''	package: 'tpFinalPoo2023'!!ViajeEspecial methodsFor: 'getMethod' stamp: 'Anonymous 7/30/2023 19:04'!getFechaSalida^fechaSalida.! !!ViajeEspecial methodsFor: 'getMethod' stamp: 'Anonymous 8/28/2023 13:45'!obtenerPrimeraFecha^fechaSalida.! !!ViajeEspecial methodsFor: 'setMethod' stamp: 'Anonymous 7/30/2023 19:03'!addFechaSalida: f1 conFechaRegreso: f2fechaSalida:=f1.fechaRegreso:= f2.! !!ViajeEspecial methodsFor: 'initalize' stamp: 'Anonymous 8/26/2023 23:33'!inicializar: unNombreCiudad conUnaFechaSalida: unaFechaSalida conUnaFechaRegreso: unaFechaRegresonombreDeLaCiudad:= unNombreCiudad.fechaSalida:=unaFechaSalida.fechaRegreso := unaFechaRegreso.! !!ViajeEspecial methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/31/2023 22:54'!verificarFechaDisponibleEnViaje: unaFechaNueva^false.! !!ViajeEspecial methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/27/2023 17:40'!esViajeOrganizado^false! !!ViajeEspecial methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/27/2023 03:28'!obtenerViajePorRangoInicio:f1 conFechaFin: f2|respuesta|respuesta:=((f1 isBefore:fechaSalida) and:(f2  isAfter: fechaSalida)).(respuesta)ifTrue:[^self]ifFalse:[^nil].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeEspecial class	instanceVariableNames: ''!!ViajeEspecial class methodsFor: 'constructor' stamp: 'Anonymous 8/4/2023 16:04'!crearUnViajeEspecialConUnNombre: unNombre conUnCostoPorPersona: unaCostoPorPersona conUnImporteImpuesto: unImporteImpuesto conUnNombreCiudad: unNombreCiudad conUnaFechaSalida: unaFechaSalida  conUnaFechaRegreso: unaFechaRegreso|unViajeEspecial|unViajeEspecial:=self crearUnViajeConUnNombre: unNombre conUnCostoPorPersona: unaCostoPorPersona conUnImporteImpuesto: unImporteImpuesto.unViajeEspecial inicializar: unNombreCiudad conUnaFechaSalida: unaFechaSalida conUnaFechaRegreso: unaFechaRegreso.^unViajeEspecial.! !Viaje subclass: #ViajeOrganizado	instanceVariableNames: 'cantidDiasDuracion collEtapa collFechaViajeOrganizado collExcursionesOpc'	classVariableNames: ''	package: 'tpFinalPoo2023'!!ViajeOrganizado methodsFor: 'initialize' stamp: 'Anonymous 8/27/2023 23:55'!inicializar: unaCantidadDiasDuracion conUnaEtapaViaje: unaEtapaViaje  conUnaCollFechaSalida: unaCollFechaSalidacantidDiasDuracion:=unaCantidadDiasDuracion.collEtapa:=OrderedCollection new.collEtapa add:unaEtapaViaje.collFechaViajeOrganizado :=unaCollFechaSalida.! !!ViajeOrganizado methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/4/2023 17:41'!agregarFecharConUnCupo: unaFechaConUnCupocollFechaViajeOrganizado add: unaFechaConUnCupo.! !!ViajeOrganizado methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/28/2023 14:51'!getExcursionOpcDeViajeOrganizado: unId"getExcursionOpcDeViajeOrganizado devuelve un objecto o nil"|res|collEtapa detect:[:unaEtapa| res:=unaEtapa obtenerUnaExcursion:unId. unaEtapa isNotNil]ifNone:[nil]."si el resultado es vacio, entonces  le devuelvo nil"^res.! !!ViajeOrganizado methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/28/2023 10:46'!esViajeOrganizado^true.! !!ViajeOrganizado methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/30/2023 13:23'!verificarFechaDisponibleEnViaje:unaFechaNueva|unaCoincidencia|unaCoincidencia:=collFechaViajeOrganizado detect: [:unF | unF verificarCoincidenciaConUnaFechaNueva: unaFechaNueva ]ifNone:[nil].(unaCoincidencia)ifNotNil: [ ^true. ]ifNil: [ ^false. ]! !!ViajeOrganizado methodsFor: 'aplicattionMethod' stamp: 'Anonymous 8/27/2023 21:02'!setAddEtapaViaje: unaEtapaViajecollEtapa add: unaEtapaViaje.! !!ViajeOrganizado methodsFor: 'aplicattionMethod' stamp: 'Anonymous 9/2/2023 00:42'!obtenerViajePorRangoInicio: f1 conFechaFin: f2	| resultado |	resultado := collFechaViajeOrganizado select: [ :unaFechaSalida |		             unaFechaSalida fechaViaje: f1 conFechaFin: f2 ].	resultado ifNil: [ ^ nil ] ifNotNil: [ ^ resultado ]! !!ViajeOrganizado methodsFor: 'setMethod' stamp: 'Anonymous 8/1/2023 12:02'!addFechaSalida: unaFechaSalidacollFechaViajeOrganizado add: unaFechaSalida.! !!ViajeOrganizado methodsFor: 'getMethod' stamp: 'Anonymous 8/1/2023 12:02'!mostrarFechasDisponibles^collFechaViajeOrganizado! !!ViajeOrganizado methodsFor: 'getMethod' stamp: 'Anonymous 8/31/2023 22:18'!obtenerPrimeraFecha|unaFecha|unaFecha:=collFechaViajeOrganizado at: 1.^unaFecha getFechaSelecionada.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeOrganizado class	instanceVariableNames: ''!!ViajeOrganizado class methodsFor: 'constructor' stamp: 'Anonymous 8/27/2023 19:42'!crearUnViajeOrganizadoConUnNombre: unNombre conUnCostoPorPersona: unCostoPersona conUnImporteImpuesto: unImporteImpuesto conUnaCantidadDuracion: unaCantidadDiasDuracion conUnaEtapaViaje: unaEtapaViaje conUnaCollFechaViajeSalida: unaCollFechaSalida|unViajeOrganizado|unViajeOrganizado:= self crearUnViajeConUnNombre: unNombre conUnCostoPorPersona: unCostoPersona conUnImporteImpuesto: unImporteImpuesto.unViajeOrganizado inicializar: unaCantidadDiasDuracion conUnaEtapaViaje: unaEtapaViaje  conUnaCollFechaSalida: unaCollFechaSalida.^unViajeOrganizado. ! !